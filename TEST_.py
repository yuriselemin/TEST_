

for i in range(1, 11):
    for j in range(1, 11):
        print(f'{i} * {j} = {i*j}')




Primes: [2, 3, 5, 7, 11, 13]
Not Primes: [4, 6, 8, 9, 10, 12, 14, 15]

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

primes = []  # Список для хранения простых чисел
not_primes = []  # Список для хранения составных чисел

for index in range(1, len(numbers)):  # Начинаем цикл с индекса 1, чтобы пропустить первое число (1)
    is_prime  = True  # Устанавливаем флаг, что число может быть простым
    for j in range(2, index):  # Перебираем возможные делители числа от 2 до индекса числа минус 1
        if numbers[index] % j == 0:  # Проверяем, делится ли число на j без остатка
            is_prime = False  # Если делится, значит число составное
            break  # Прерываем внутренний цикл, так как число уже не может быть простым
    if is_prime:  # Если число простое, добавляем его в список простых чисел
        primes.append(numbers[index])
    else:  # Если число составное, добавляем его в список составных чисел
        not_primes.append(numbers[index])

print(primes)  # Выводим список простых чисел
print(not_primes)  # Выводим список составных чисел




def is_prime(n):  # Функция для проверки, является ли число n простым
    if n <= 1:  # Проверяем, больше ли число 1, так как меньшие числа не могут быть простыми
        return False
    for i in range(2, n):  # Перебираем числа от 2 до n-1, так как все простые числа, кроме 2, имеют в качестве делителя только 1 и само себя
        if n % i == 0:  # Проверяем, делится ли n на i без остатка
            return False  # Если делится, то n не является простым числом
    return True  # Если дошли до конца цикла без возврата False, то n - простое число

print(is_prime(2))  # Выводим результат функции is_prime для числа 2. Так как 2 - простое число, функция вернет True